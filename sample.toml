

# [[http]]
# name = "example-http"
# bind-addr = "127.0.0.1:9096"
# output = [
#     { name="local1", location = "http://127.0.0.1:8086/write" },
#     { name="local2", location = "http://127.0.0.1:7086/write" },
# ]
#
# [[udp]]
# name = "example-udp"
# bind-addr = "127.0.0.1:9096"
# read-buffer = 0 # default
# output = [
#     { name="local1", location="127.0.0.1:8089", mtu=512 },
#     { name="local2", location="127.0.0.1:7089", mtu=1024 },
# ]

# [[beringei]]
# name = "example-beringei"
# bind-addr = "0.0.0.0:9097"
# amqp-url = "amqp://guest:guest@127.0.0.1:5672/"
# beringei-update-url = "http://127.0.0.1:9990/update"
# output = [
#     { name="local1", location="127.0.0.1:9990"}
# ]
# graphite-output = "127.0.0.1:2003"

[[graphite]]
name = "example-graphite"
bind-addr = "0.0.0.0:9097"

# output is a list of graphite backends
output = [
    { name="local1", location="graphite:2003"}
]

# metering will send stats for samples/org/machine
# you have to also set amqp-url for metering to work
enable-metering = false

# Metering
# You have to set both amqp-url and cron-schedule to periodically
# push metrics to rabbitmq

amqp-url = "amqp://guest:guest@rabbitmq:5672/"

# cron-schedule could be in different formats
# For example:
# cron-schedule = "@every 5s"
# cron-schedule = "@every 1m"
# cron-schedule = "@hourly"
# cron-schedule = "0 30 * * * *"
cron-schedule = "@every 10s"


# drop-unauthorized is used when data are coming to gocky having a source
# different than traefik (e.g. unauthorized)
# if drop-unauthorized is true, then gocky will return forbidden error
# if set to false, it will write data to graphite in the form of
# Unauthorized_machineID.cpu.0.idle
drop-unauthorized = false
